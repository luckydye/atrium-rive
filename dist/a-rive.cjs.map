{"version":3,"sources":["../src/index.ts","../src/components/AtriumRive.ts"],"sourcesContent":["export { AtriumRive } from \"./components/AtriumRive\";\n","import {\n  css,\n  html,\n  HTMLTemplateResult,\n  LitElement,\n  PropertyValueMap,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators.js\";\nimport { Rive } from \"@rive-app/canvas-single\";\n\n/**\n *\n * Ideas here:\n * - transition between multiple riv files like stinger.\n * - canvas filters and color change\n * -\n */\n\n@customElement(\"a-rive\")\nexport class AtriumRive extends LitElement {\n  public static styles = css`\n    :host {\n      position: relative;\n    }\n\n    canvas {\n      display: block;\n      width: var(--w);\n      height: var(--h);\n    }\n\n    .container {\n      display: contents;\n    }\n  `;\n\n  protected render(): HTMLTemplateResult {\n    return html`<div class=\"container\">${this.canvas}</div>`;\n  }\n\n  @property({ type: String, reflect: true }) public src?: string;\n  @property({ type: Number, reflect: true }) public width?: number = 600;\n  @property({ type: Number, reflect: true }) public height?: number = 600;\n  @property({ type: String, reflect: true }) public stateMachine?: string;\n  @property({ type: Boolean, reflect: true }) public autoplay: boolean = true;\n\n  @query(\".container\") container: HTMLElement;\n\n  get activeStateMachine() {\n    return this.stateMachine;\n  }\n\n  canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n  bufferCanvas: HTMLCanvasElement = document.createElement(\"canvas\");\n\n  animations: Rive[] = [];\n\n  get pixelRatio() {\n    return devicePixelRatio || 1;\n  }\n\n  format() {\n    this.canvas.width = this.width * this.pixelRatio;\n    this.canvas.height = this.height * this.pixelRatio;\n    this.container.style.setProperty(\"--w\", this.width + \"px\");\n    this.container.style.setProperty(\"--h\", this.height + \"px\");\n  }\n\n  protected firstUpdated(): void {\n    this.format();\n  }\n\n  protected updated(\n    _changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n  ): void {\n    if (_changedProperties.has(\"src\")) {\n      this.dispose(0);\n      this.createAnimation(this.src, this.autoplay, this.stateMachine);\n      this.format();\n    }\n  }\n\n  dispose(index: number) {\n    if (this.animations.length > 0) {\n      this.animations[index].cleanup();\n      this.animations.splice(index, 1);\n    }\n  }\n\n  createAnimation(src: string, autoplay?: boolean, stateMachine?: string) {\n    return new Promise((resolve) => {\n      const rive = new Rive({\n        canvas: this.canvas,\n        src: src,\n        stateMachines: stateMachine,\n        autoplay: autoplay,\n        onLoad: () => resolve(rive),\n      });\n      console.log(rive);\n      this.animations.push(rive);\n    });\n  }\n\n  trigger(rive: Rive, stateMachine: string, name: string) {\n    const inputs = rive.stateMachineInputs(stateMachine);\n    if (inputs) {\n      for (const input of inputs) {\n        if (input.name === name) {\n          input.fire();\n          break;\n        }\n      }\n    }\n  }\n\n  transition(\n    source: string,\n    trigger?: string,\n    duration?: number,\n    offset: number = 0\n  ) {\n    if (trigger)\n      this.trigger(this.animations[0], this.activeStateMachine, trigger);\n    this.createAnimation(source, true);\n  }\n}\n"],"mappings":"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","names":[]}